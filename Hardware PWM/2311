#include <msp430.h> 
/**
 * main.c
 */

int pwm = 500;
int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // Stop watchdog timer

    PM5CTL0 &= ~LOCKLPM5;   // Disable the GPIO power-on default high-impedance mode to activate previously configured port settings

    P2SEL |= BIT0; // sets P2.0 as a GPIO
    P2DIR |= BIT0;  // sets P2.0 as an output (LED)
    P1DIR &= ~BIT1; // sets P1.1 as an input (button)
    P1REN |= BIT1;  // resistor enable at P1.1
    P1OUT |= BIT1;  // set as pull up
    P1IE |= BIT1;   // enables interrupts at button
    P1IFG &= ~BIT1; // clears interrupts

    TB0CCTL0 = CCIE;    // CCR1 interrupt enabled
    TB0CCR0 = 10000;    //overflow every 10ms FOR DEBOUNCE
    TB1CCTL1 = OUTMOD_7;    // CCR1 reset/set
    TB1CCR0 = 1000-1;   //overflow every 1ms FOR PWM PERIOD
    TB1CCR1 = 500;  //PWM starts at 50%
    TB1CTL = TBSSEL__SMCLK + MC__UP + TBCLR + ID_2; //smclk, up mode

    __bis_SR_register(LPM0_bits + GIE); // Enter LPM0 w/ interrupt

    return 0;
}

#pragma vector=PORT1_VECTOR //button interrupt
__interrupt void PORT_1(void)
{
    TB0CTL = TBSSEL__SMCLK + MC__UP + TBCLR + ID_2; // enables timer

    P1IFG &= ~BIT1; // clears interrupt
    P1IES &= ~BIT1; // sets edge select low to high
}

#pragma vector=TIMER0_B0_VECTOR
__interrupt void Timer0_A0 (void)
{
    if(pwm < 1000) pwm += 100;
    else pwm = 0;
    P1IE |= BIT1;   // enables interrupt
    TB1CCR1 = pwm;  // PWM starts at 50%, increasing by 10% and then resets to 0
    TB0CTL = 0x00;  // stops timer
}
